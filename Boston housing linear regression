#importing all libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score



#importing boston housing data
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data'
headers = ["crime_rate_per_capita","proportion_residential_lots","proportion_business_acres","charles_river_tract","nitric_oxide_conc","avg_num_room_per_dwell","proportion_old_owner_house","dist_emplymnt_centre","accessbility_radial_highways","prop_tax_rate","pupil_teacher_ratio","black_prop","prcnt_lower_status_of_population","median_value_owner_occupied_home"]
headers_df = pd.DataFrame({"crime_rate_per_capita","proportion_residential_lots","proportion_business_acres","charles_river_tract","nitric_oxide_conc","avg_num_room_per_dwell","proportion_old_owner_house","dist_emplymnt_centre","accessbility_radial_highways","prop_tax_rate","pupil_teacher_ratio","black_prop","prcnt_lower_status_of_population","median_value_owner_occupied_home"})
house = pd.read_csv(url, header = None, index_col= None, names=headers, delim_whitespace=True)
house.head() #checking 1st 5 rows of imported data

#checking null values
house.isnull().sum()

#histogram plot of dependent variable using seaborn library (smoothed line overlay) 
sns.set(rc={'figure.figsize':(11.7,8.27)})
sns.distplot(house['median_value_owner_occupied_home'], bins=30)
plt.show()

#regular histogram plot of dependent variable using matplotlib library
plt.hist(house['median_value_owner_occupied_home'], normed=True, bins=30, histtype='stepfilled')
plt.show()

#generating correlation matrix
correlation_matrix = house.corr().round(2)

#overlaying heatmap on top of correlation matrix
# annot = True to print the values inside the square
sns.heatmap(data=correlation_matrix, annot=True)


#plotting scatter plot, pairwise between dependent vs independent variables
plt.figure(figsize=(20, 5))
features = ['prcnt_lower_status_of_population', 'avg_num_room_per_dwell']
target = house['median_value_owner_occupied_home']
for i, col in enumerate(features):
    plt.subplot(1, len(features) , i+1)
    x = house[col]
    y = target
    plt.scatter(x, y, marker='o')
    plt.title(col)
    plt.xlabel(col)
    plt.ylabel('median_value_owner_occupied_home')
 
#individual plot i.e. 1 feature with dependent variable at a time
plt.scatter(house['prcnt_lower_status_of_population'],house['median_value_owner_occupied_home'])
plt.show()


#selecting relevant features based on correlation heatmap. Also, splitting features into 2 different dataframes for training
#alternative 1
house_X = pd.DataFrame(np.c_[house['prcnt_lower_status_of_population'], house['avg_num_room_per_dwell']], columns = ['prcnt_lower_status_of_population','avg_num_room_per_dwell'])
house_Y = house['median_value_owner_occupied_home']


#selecting relevant features based on correlation heatmap. Also, splitting features into 2 different dataframes for training
#alternative 2
house_X = house[['prcnt_lower_status_of_population', 'avg_num_room_per_dwell']]
house_Y = house['median_value_owner_occupied_home']

#randomizing and splitting between training & testing sets
X_train, X_test, y_train, y_test = train_test_split(house_X, house_Y, test_size=0.20, random_state=42)


#linear regression model
regression_model = LinearRegression()

#Fit the data(train the model)
regression_model.fit(X_train, y_train)

# Predict
y_predicted = regression_model.predict(X_test)

# model evaluation
rmse = mean_squared_error(y_test, y_predicted)
r2 = r2_score(y_test, y_predicted)

# printing values
print('Slope:' ,regression_model.coef_)
print('Intercept:', regression_model.intercept_)
print('Root mean squared error: ', rmse)
print('R2 score: ', r2)


#plotting predicted vs actual value. y_test is in dataframe format, converting it into numpy array for plotting.
plt.plot(y_test.to_numpy(), color='r')
plt.plot(y_predicted, color='b')
plt.show()
